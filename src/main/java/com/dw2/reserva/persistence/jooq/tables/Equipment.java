/*
 * This file is generated by jOOQ.
 */
package com.dw2.reserva.persistence.jooq.tables;


import com.dw2.reserva.persistence.jooq.DefaultSchema;
import com.dw2.reserva.persistence.jooq.Indexes;
import com.dw2.reserva.persistence.jooq.tables.records.EquipmentRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Equipment extends TableImpl<EquipmentRecord> {

    private static final long serialVersionUID = -47030639;

    /**
     * The reference instance of <code>equipment</code>
     */
    public static final Equipment EQUIPMENT = new Equipment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EquipmentRecord> getRecordType() {
        return EquipmentRecord.class;
    }

    /**
     * The column <code>equipment.id</code>.
     */
    public final TableField<EquipmentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>equipment.name</code>.
     */
    public final TableField<EquipmentRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>equipment.laboratory_id</code>.
     */
    public final TableField<EquipmentRecord, Integer> LABORATORY_ID = createField("laboratory_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>equipment</code> table reference
     */
    public Equipment() {
        this(DSL.name("equipment"), null);
    }

    /**
     * Create an aliased <code>equipment</code> table reference
     */
    public Equipment(String alias) {
        this(DSL.name(alias), EQUIPMENT);
    }

    /**
     * Create an aliased <code>equipment</code> table reference
     */
    public Equipment(Name alias) {
        this(alias, EQUIPMENT);
    }

    private Equipment(Name alias, Table<EquipmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Equipment(Name alias, Table<EquipmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EQUIPMENT_EQUIPMENT_FK_LABORATORY, Indexes.EQUIPMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EquipmentRecord, Integer> getIdentity() {
        return Internal.createIdentity(com.dw2.reserva.persistence.jooq.tables.Equipment.EQUIPMENT, com.dw2.reserva.persistence.jooq.tables.Equipment.EQUIPMENT.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EquipmentRecord> getPrimaryKey() {
        return Internal.createUniqueKey(com.dw2.reserva.persistence.jooq.tables.Equipment.EQUIPMENT, "KEY_equipment_PRIMARY", com.dw2.reserva.persistence.jooq.tables.Equipment.EQUIPMENT.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EquipmentRecord>> getKeys() {
        return Arrays.<UniqueKey<EquipmentRecord>>asList(
              Internal.createUniqueKey(com.dw2.reserva.persistence.jooq.tables.Equipment.EQUIPMENT, "KEY_equipment_PRIMARY", com.dw2.reserva.persistence.jooq.tables.Equipment.EQUIPMENT.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Equipment as(String alias) {
        return new Equipment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Equipment as(Name alias) {
        return new Equipment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Equipment rename(String name) {
        return new Equipment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Equipment rename(Name name) {
        return new Equipment(name, null);
    }
}
